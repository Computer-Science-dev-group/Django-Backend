# Generated by Django 4.0.10 on 2023-07-12 22:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uia_backend.messaging.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cluster', '0002_alter_clusterinvitation_duration'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last update at')),
                ('content', models.TextField(max_length=2000)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last update at')),
                ('title', models.TextField(max_length=300)),
                ('content', models.TextField(max_length=2000)),
                ('is_shared', models.BooleanField(default=False)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='cluster.cluster')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last update at')),
                ('comment', models.TextField(blank=True, max_length=300)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cluster.cluster')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shares', to=settings.AUTH_USER_MODEL)),
                ('new_post', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='shared_from', to='messaging.post')),
                ('shared_post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shares', to='messaging.post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last update at')),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='messaging.comment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='likes', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='messaging.post')),
            ],
        ),
        migrations.CreateModel(
            name='FileModel',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last update at')),
                ('file_type', models.IntegerField(choices=[(0, 'Image File'), (1, 'Video File'), (2, 'Audio File'), (3, 'Document File'), (4, 'Uncategorized File')], max_length=50)),
                ('file', models.FileField(upload_to=uia_backend.messaging.models.file_upload_location, validators=[uia_backend.messaging.models.validate_file_size])),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='messaging.comment')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='files', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='messaging.post')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='messaging.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='replying',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='messaging.comment'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('comment__isnull', True), ('post__isnull', False)), models.Q(('comment__isnull', False), ('post__isnull', True)), _connector='OR'), name='messaging_like Must set one and only one of comment or post.'),
        ),
        migrations.AddConstraint(
            model_name='filemodel',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('comment__isnull', True), ('post__isnull', False)), models.Q(('comment__isnull', False), ('post__isnull', True)), models.Q(('comment__isnull', True), ('post__isnull', True)), _connector='OR'), name='messaging_filemodel Must set one of comment or post.'),
        ),
    ]
